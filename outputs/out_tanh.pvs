cruisenn_tanh: THEORY
    BEGIN 
        IMPORTING matrices@matrices
		IMPORTING lnexp@exp_series

	linear0: MatrixMN(3,9) = (:(:-0.599691,0.364658,-0.637507,0.412712,-0.097102,-0.279176,-0.599833,-0.376312,0.336222:),(:0.146966,-0.220218,0.385144,0.351899,0.053985,0.574442,-0.570637,0.322523,-0.260302:),(:1.514268,2.303468,-0.648349,-0.090035,1.320617,-0.777853,-0.099061,-2.277836,0.457567:):)
	linear_bias0: MatrixMN(1,9) = (:(:-0.309031,-0.374588,-0.811104,-0.007218,0.328503,0.062669,-0.033401,0.213295,1.080161:):)
	linear2: MatrixMN(9,1) = (:(:1.765456:),(:0.455343:),(:1.145311:),(:-0.512913:),(:0.696255:),(:-0.532288:),(:0.655821:),(:1.223822:),(:-1.846871:):)
	linear_bias2: MatrixMN(1,1) = (:(:-0.498080:):)

	e(x: real): real =
		exp_estimate(x,10)

	tanh(x: real): real =
		IF x > 0 THEN
		(e(2*x) - 1) / (e(2*x)+  1)
		ELSE
		-(e(-2*x) - 1) / (e(-2*x)+  1)
		ENDIF

    tanhMat(M: Matrix): MatrixMN(rows(M),columns(M)) =
        form_matrix(LAMBDA (i,j:nat): tanh(entry(M)(i,j)), rows(M), columns(M));

	x0inreal: TYPE = { r: real | r>=-5 AND r<=5 }
	x1inreal: TYPE = { r: real | r>=-5 AND r<=5 }
	x2inreal: TYPE = { r: real | r>=-5 AND r<=5 }

	net(input: Matrix): Matrix =		
		tanhMat(input*linear0+linear_bias0)*linear2+linear_bias2

	% @QED value_tester proved by federico on Fri, 27 Oct 2023 19:23:38 GMT
	value_tester: LEMMA
		entry( net( (:(:2,2,2:):) ) )(0,0) >= -5

	network_bounds: THEOREM
		FORALL (x0in: x0inreal,x1in: x1inreal,x2in: x2inreal):
			entry( net( (:(:x0in,x1in,x2in:):) ) )(0,0) >= -10

END cruisenn_tanh