cruisenn: THEORY
    BEGIN 
	
	importing matrices@matrices

	linear0: MatrixMN(3,9) = (:(:-0.394413,-0.496692,0.033332,-0.591888,-1.185820,-0.262135,-1.423273,-0.413800,-0.066217:),(:-0.359754,-0.093051,-0.435848,0.562104,0.755693,-0.334743,0.795124,-0.001384,-0.280825:),(:-0.198347,0.155643,0.068865,-3.666162,-2.712184,-0.239792,-0.266869,-0.441627,0.463080:):)
	linear2: MatrixMN(9,1) = (:(:-0.094392:),(:-0.006206:),(:0.076072:),(:0.317998:),(:-0.752860:),(:0.027212:),(:0.555982:),(:0.023322:),(:-0.140148:):)
	
	relu(x: real): real = IF x > 0 THEN x ELSE 0 ENDIF


    reluMat(M: Matrix): MatrixMN(rows(M),columns(M)) =
        form_matrix(LAMBDA (i,j:nat): relu(entry(M)(i,j)), rows(M), columns(M));

	x0inreal: TYPE = { r: real | r>= 0 AND r<=5 }
	x1inreal: TYPE = { r: real | r>= 0 AND r<=5 }
	x2inreal: TYPE = { r: real | r>= 0 AND r<=5 }

	net(input: Matrix): Matrix =		
		reluMat(input*linear0)*linear2

	% @QED network_bounds proved by federico on Fri, 20 Oct 2023 10:28:02 GMT
	network_bounds: THEOREM
		FORALL (x0in: x0inreal,x1in: x1inreal,x2in: x2inreal):
			entry( net( (:(:x0in,x1in,x2in:):) ) )(0,0) < 3 AND 
			entry( net( (:(:x0in,x1in,x2in:):) ) )(0,0) > -1

END cruisenn
